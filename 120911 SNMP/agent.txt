

#include<stdio.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<string.h>
#include<unistd.h>
#include<netinet/in.h>
#include<stdlib.h>

//SERVER

# define PORTNO 6403
struct data
        {
        char *data1;
        char *data2;
        };



struct node
        {
        struct node *lnode;
        struct node *rnode;
        char *id;
        struct data *d;
        }*root;

void insert(char *str,char *n1,char *n2) // bin tree insertion
        {
        struct node *temp;
        struct node *prev,*nnew;

        temp=root;

        nnew=(struct node *)malloc(sizeof(struct node));
        nnew->id=str;
        nnew->lnode=NULL; nnew->rnode=NULL;

        nnew->d=(struct data*)malloc(sizeof(struct data));
        (nnew->d)->data1=(char *)malloc(100*sizeof(char));
        (nnew->d)->data2=(char *)malloc(100*sizeof(char));

        strcpy((nnew->d)->data1,n1);
        strcpy((nnew->d)->data2,n2);

        while(temp!=NULL)
                {
                prev=temp;
                if(strcmp((temp->id),str)>0)
                        {
                        temp=temp->lnode;
                        }
                else if(strcmp((temp->id), str)==0)
                        {
                        printf("\n Already Exists!");
                        return;
                        }
                else
                        {
                        temp=temp->rnode;
                        }
                }

        if(strcmp(str,(prev->id))<0)
                prev->lnode=nnew;
        else
                prev->rnode=nnew;
        }





char* retrieve(char *idstr)
        {
        int y;
        char *s, *t;
        char tem;

        t=(char *)malloc(100*sizeof(char));

        printf("\n\n\t Entering retrieve! %s", idstr);

        struct node *temp=root;
        while(temp!=NULL)
                {
                if(strcmp(temp->id,idstr)==0)
                        {
                        s=(temp->d)->data1;
                        strcat(t, "(");
                        strcat(t,s);
                        strcat(t,",");

                        s=(temp->d)->data2;
                        strcat(t,s);
                        strcat(t,") ");
                        break;
                        }

                else if(strcmp(temp->id,idstr)>0)
                        {
                        temp=temp->lnode;
                        }
                else
                        {
                        temp=temp->rnode;
                        }
                }

        if(strlen(t)==0)
                {
                strcpy(t,"not found");
                }
        printf("\n\t     Retrieved: %s",t);
        printf("\n\t Leaving Retrieve\n");
        return t;
        }


char * set(char *id, char *val1, char *val2)
        {
        insert(id, val1, val2);

        return "Success!";
        }



void mytree()
        {
        root->id="5";
        root->lnode=NULL;
        root->rnode=NULL;

        root->d=(struct data*)malloc(sizeof(struct data));
        (root->d)->data1="rootdata1";
        (root->d)->data2="rootdata2";

        insert("1","1data1","1data2");
        insert("6","5data1","5data2");
        insert("7","7data1","7data2");
        insert("2","2data1","2data2");
        }











char* setfunc(char * content) /// do properly!
        {
        char *id =(char *)malloc(300);
        char *val1=(char *)malloc(300);
        char *val2=(char *)malloc(300);

        char temp[100], res[100];
        int i, count, k=0;
        count=0;
        printf("\n Entering SETfunc! %s", content);

        for(i=2;i<strlen(content);i++)  // i from 2
                {
                temp[k++]=content[i];
                if(content[i]=='.' && count==0)
                        {
                        temp[k]='\0';
                        strcat(id, temp);
                        k=0;
                        ++count;
                        }
                if(content[i]=='.' && count==1)
                        {
                        temp[k]='\0';
                        strcat(val1, temp);
                        k=0;
                        ++count;
                        }
                if(content[i]=='.' && count==2)
                        {
                        temp[k]='\0';
                        strcat(val2, temp);
                        k=0;
                        count=0;
                        return(set(id, val1, val2));
                        }
                }

//      printf("\ Leaving getfunc! ");

        }












char* getfunc(char *content)
        {
        char *str="";
        str=(char*)malloc(300*sizeof(char));

        int i,k=0;
        char temp[100]="";

        printf("\n Entering getfunc! %s", content);

        for(i=2;i<strlen(content);i++) // i from 2
                {
                if(content[i]=='.')
                        {
                        temp[k]='\0';
                        strcat(str," ");
                        strcat(str,temp);   //appends id:
                        strcat(str,":");

                        printf("\n\t going to retrieve %s", str);
                        strcat(str,retrieve(temp));  // retrieves data

                        printf("\n%s",str);
                        strcpy(temp,"");
                        k=0;
                        }
                else
                        {
                        temp[k++]=content[i];
                        }

                }
        temp[k]='\0';

        printf("\n Leaving getfunc %s",str);
        return str;
        }










int main(int argc,char *argv[])
{
int sockfd,len;
char read_buff[100],write_buff[100];
struct sockaddr_in cl,sa;
int i,c,fl=0;


root=(struct node *)malloc(sizeof(struct node));
if(root==NULL)
        printf("\n no root ");
else
        printf("\nRoot created!");

mytree();

sockfd=socket(AF_INET,SOCK_DGRAM,0);
if(sockfd<0)
        {
        printf("\nsock fail");
        exit(0);
        }
else
        {
        printf("\nsock created successfully");
        }

sa.sin_family=AF_INET;
sa.sin_addr.s_addr=htonl(INADDR_ANY);
sa.sin_port=htons(PORTNO);

if(bind(sockfd,(struct sockaddr *)&sa,sizeof(sa))<0)
        {
        printf("\nbinding error");
        exit(0);
        }

else
        {
        printf("\nbound successfully");
        }

bzero(read_buff,sizeof(read_buff));
len=sizeof(cl);
bzero(write_buff,sizeof(write_buff));

recvfrom(sockfd,read_buff,sizeof(read_buff),0,(struct sockaddr *)&cl,&len);

printf("\nQuery: %s\n",read_buff);



printf("\n Choice: %c", read_buff[0]);

if(read_buff[0]=='G')
        {
        printf("\n Entering get..");
        strcpy(write_buff,getfunc(read_buff));
        }
else if(read_buff[0]=='T')

                        printf("\n%s",str);
                        strcpy(temp,"");
                        k=0;
                        }
                else
                        {
                        temp[k++]=content[i];
                        }

        {
        printf("\n Entering trap..");
        strcpy(write_buff, read_buff);
        }
else
        {
        printf("\n Entering set..");
        strcpy(write_buff, setfunc(read_buff));
        }



printf("\nReturned: %s\n", read_buff);

sendto(sockfd,write_buff,sizeof(write_buff),0,(struct sockaddr *)&cl,len);
close(sockfd);
}
